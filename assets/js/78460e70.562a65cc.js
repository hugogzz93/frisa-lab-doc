"use strict";(self.webpackChunkfrisa_lab_doc=self.webpackChunkfrisa_lab_doc||[]).push([[9746],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return p}});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=a.createContext({}),d=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=d(n.components);return a.createElement(s.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,s=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),m=d(t),p=o,f=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return t?a.createElement(f,i(i({ref:e},c),{},{components:t})):a.createElement(f,i({ref:e},c))}));function p(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:o,i[1]=l;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1359:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),i=["components"],l={sidebar_position:1},s="Intro",d={unversionedId:"frontend/intro",id:"frontend/intro",title:"Intro",description:"Overview",source:"@site/docs/frontend/intro.md",sourceDirName:"frontend",slug:"/frontend/intro",permalink:"/frisa-lab-doc/docs/frontend/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"frontendSidebar",next:{title:"Table",permalink:"/frisa-lab-doc/docs/frontend/components/Table"}},c={},u=[{value:"Overview",id:"overview",level:2}],m={toc:u};function p(n){var e=n.components,t=(0,o.Z)(n,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"intro"},"Intro"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"El modulo de laboratorio consiste principalmente en ",(0,r.kt)("strong",{parentName:"p"},"dos tipos de componentes: formularios y tablas.")),(0,r.kt)("p",null,"La idea es que cada componente sea equipado con ",(0,r.kt)("strong",{parentName:"p"},"suficiente funcionalidad para cumplir las necesidades\nprevistas para el modulo")," y al mismo tiempo que sea facilmente ",(0,r.kt)("strong",{parentName:"p"},"extendible")," para poder adaptarse a necesidades\nque surgan con el tiempo."),(0,r.kt)("h1",{id:"demo"},"Demo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import { Table, Button, FormComponent, ThemeTextFieldElement } from 'components'\nimport { useForm } from 'react-hook-form'\nimport { EditableTableConfig, useEditableTable } from 'lib'\nconst TableConfiguration = () => ({\n    header: {\n        id: 'list-materiales-prueba',\n        idColumn: 'id',\n        getId: d => d.id,\n        tableActions: []\n    }, \n    columns: [\n        {\n            id: 'name',\n            label: 'Name',\n            valueFn: d => d.name,\n        },{\n            id: 'lastName',\n            label: 'Apellido',\n            valueFn: d => d.lastName,\n        },{\n            id: 'city',\n            label: 'Ciudad',\n            valueFn: d => d.address.city,\n        },{\n            id: 'state',\n            label: 'Estado',\n            valueFn: d => d.address.state,\n        }\n    ]\n\n})\n\nconst sampleData = [\n    {\n        name: 'Hugo',\n        lastName: 'Gonzalez',\n        address: {\n            city: 'Monterrey',\n            state: 'Nuevo Leon',\n        }\n    },{\n        name: 'Marcelo',\n        lastName: 'Gonzalez',\n        address: {\n            city: 'Aguascalientes',\n            state: 'Aguascalientes',\n        }\n    }\n]\n export const Demo = () => {\n     return (\n         <div className=\"container mx-auto\">\n             <Table \n                 rowData={sampleData}\n                 configuration={TableConfiguration()}\n             />\n         </div>\n     )\n }\n\n\n\n// const TableConfiguration = ({table}) => ({\n//     header: {\n//         id: 'list-materiales-prueba',\n//         idColumn: 'id',\n//         getId: d => d.id,\n//         tableActions: []\n//     }, \n//     columns: [\n//         {\n//             id: 'name',\n//             label: 'Name',\n//             valueFn: d => d.name,\n//             editableFn: ({name, label, value, onChange}) => (\n//                     <input className='border border-1 border-slate-500' type='text' value={value} onChange={onChange}/>\n//             )\n//         },{\n//             id: 'lastName',\n//             label: 'Apellido',\n//             valueFn: d => d.lastName,\n//             editableFn: (props) => (\n//                 <ThemeTextFieldElement {...props}/>\n//             )\n//         },{\n//             id: 'city',\n//             label: 'Ciudad',\n//             valueFn: d => d.address?.city,\n//             editableFn: (props) => (\n//                 <div>\n//                     <i class=\"fa-solid fa-list mx-2\"></i>\n//                     <i class=\"fa-solid fa-list-ul\"></i>\n//                 </div>\n//             )\n//         },{\n//             id: 'state',\n//             label: 'Estado',\n//             valueFn: d => d.address?.state,\n//         },{\n//             id: '',\n//             label: 'Acciones',\n//             valueFn: _ => '',\n//             editableFn: (props) => {\n//                 debugger\n//                 return (\n//                     <i className=\"fa-solid fa-cloud-arrow-up\" onClick={() => table.handleSubmit(props.originalData, (data) => {\n//                         debugger\n//                     })}></i>\n//                 )\n//             }\n//         }\n//     ]\n\n// })\n\nconst sampleDataEditableTable = [\n    {\n        name: 'Hugo',\n        lastName: 'Gonzalez',\n        address: {\n            city: 'Monterrey',\n            state: 'Nuevo Leon',\n        },\n    },{\n        name: 'Marcelo',\n        lastName: 'Gonzalez',\n        address: {\n            city: 'Aguascalientes',\n            state: 'Aguascalientes',\n        }\n    }\n]\n\n\n// export const Demo = () => {\n//     const formMethods = useForm()\n//     const table = useEditableTable({formMethods})\n\n//     return (\n//         <div className=\"container mx-auto\">\n//             <Table \n//                 rowData={table.overrideRows(sampleData)}\n//                 configuration={new EditableTableConfig({...TableConfiguration({table}), formMethods})}\n//             />\n//             <Button onClick={table.addNewRow}>Add new Row</Button>\n//         </div>\n//     )\n// }\n\nconst FormConfiguration = () => ({\n    layout: {\n        type: 'grid',\n        cols: 12,\n        fieldLayout: [\n            {\n                id: 'name',\n                cols: 6\n            }, {\n                id: 'lastName',\n                cols: 6\n            },{\n                id: 'address.state',\n                cols: 6\n            },{\n                id: 'address.city',\n                cols: 6\n            }\n        ]\n    },\n    actions: [\n        {\n            render: () => (\n                <Button className='flex align-center' isLoading={false}>Guardar</Button>\n            )\n        }\n    ],\n    fields: [\n        {\n            id: 'name',\n            type: 'text',\n            label: 'Nombre',\n            onChange: ({event, formMethods}) => {\n                if(event.target.value.length <= 3)\n                    formMethods.setError('name', {type: 'Length', message: 'Muy Corto'})\n                else \n                    formMethods.clearErrors('name')\n            }\n        },{\n            id: 'lastName',\n            type: 'render',\n            label: 'Apellido',\n            render: ({onChange, value, label}) => {\n                return <input type=\"text\" value={value} onChange={onChange}/>\n            }\n        },{\n            id: 'address.state',\n            type: 'select',\n            label: 'Estado',\n            optionsFn: () => [\n                {id: 'nuevoLeon', label: 'Nuevo Leon'},\n                {id: 'aguascalientes', label: 'Aguascalientes'},\n            ]\n        },{\n            id: 'address.city',\n            type: 'select',\n            label: 'City',\n            optionsFn: () => [\n                {id: 'monterrey', label: 'Monterrey'},\n                {id: 'aguascalientes', label: 'Aguascalientes'},\n                {id: 'reynosa', label: 'Reynosa'},\n            ]\n        }\n    ]\n})\n\n// export const Demo = () => {\n\n//     const onSubmit = (data) => {\n//         debugger\n\n//     }\n\n//     const defaultPerson = sampleData[0]\n\n//     return (\n//         <div className=\"container mx-auto\">\n//             <div class=\"bg-white p-4\">\n//                 <FormComponent\n//                     onSubmit={onSubmit}\n//                     configuration={FormConfiguration()}\n//                 />\n//             </div>\n//         </div>\n//     )\n\n// }\n")))}p.isMDXComponent=!0}}]);