"use strict";(self.webpackChunkfrisa_lab_doc=self.webpackChunkfrisa_lab_doc||[]).push([[4237],{3905:function(t,e,a){a.d(e,{Zo:function(){return u},kt:function(){return c}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),d=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},u=function(t){var e=d(t.components);return n.createElement(m.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},s=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),s=d(a),c=r,k=s["".concat(m,".").concat(c)]||s[c]||p[c]||l;return a?n.createElement(k,o(o({ref:e},u),{},{components:a})):n.createElement(k,o({ref:e},u))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=s;var i={};for(var m in e)hasOwnProperty.call(e,m)&&(i[m]=e[m]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},9731:function(t,e,a){a.r(e),a.d(e,{assets:function(){return u},contentTitle:function(){return m},default:function(){return c},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={},m="Form",d={unversionedId:"frontend/components/Form",id:"frontend/components/Form",title:"Form",description:"Este articulo explica como crear formularios utilizando el componente [Form]",source:"@site/docs/frontend/components/Form.md",sourceDirName:"frontend/components",slug:"/frontend/components/Form",permalink:"/frisa-lab-doc/docs/frontend/components/Form",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/components/Form.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Table",permalink:"/frisa-lab-doc/docs/frontend/components/Table"},next:{title:"Introduction",permalink:"/frisa-lab-doc/docs/frontend/Inputs/Introduction"}},u={},p=[{value:"Crear un Formulario",id:"crear-un-formulario",level:2},{value:"OnSubmit",id:"onsubmit",level:2},{value:"Tipos de campos",id:"tipos-de-campos",level:2},{value:"Default Values",id:"default-values",level:2},{value:"OnChange",id:"onchange",level:2},{value:"Custom Layouts",id:"custom-layouts",level:2},{value:"API",id:"api",level:2},{value:"Configuration",id:"configuration",level:3},{value:"FormLayout",id:"formlayout",level:4},{value:"FieldLayoutObject",id:"fieldlayoutobject",level:4},{value:"FormAction",id:"formaction",level:4},{value:"FieldObject",id:"fieldobject",level:4}],s={toc:p};function c(t){var e=t.components,a=(0,r.Z)(t,o);return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"form"},"Form"),(0,l.kt)("p",null,"Este articulo explica como crear formularios utilizando el componente ","[",(0,l.kt)("inlineCode",{parentName:"p"},"Form"),"]"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/hugogzz93/anlab-front/blob/master/src/components/Form/Form.jsx"},"Codigo Fuente")),(0,l.kt)("h2",{id:"crear-un-formulario"},"Crear un Formulario"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Form")," espera por lo menos ",(0,l.kt)("strong",{parentName:"p"},"dos parametros, los campos y un callback a llamar cuando se ingrese el formulario"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"\nconst myConfig = {\n    layout: {\n        type: 'grid',\n        cols: 12,\n        fieldLayout: [\n            {id: 'name', cols: 6},\n            {id: 'gender', cols: 6},\n            {id: 'birthDate', cols: 12},\n        ]\n    },\n    actions: [\n        {\n            render: () => (\n                <button>Guardar</button>\n            )\n        }\n    ],\n    fields: [\n        {\n            id: 'name',\n            type: 'text',\n            label: 'Nombre'\n            rules: {\n                required: true\n            }\n        },{\n            id: 'birthDate',\n            type: 'date',\n            label: 'Fecha de Nacimiento',\n        },{\n            id: 'gender',\n            type: 'select',\n            label: 'Genero',\n            optionsFn: () => [\n                {label: 'Hombre', value: 'male'},\n                {label: 'Mujer', value: 'female'},\n            ]\n\n        }\n    ]\n}\n\nconst MyForm = () => {\n    const onSubmit = data => ServerAPI.saveData(data);\n\n    return (\n        <FormComponent\n            onSubmit={onSubmit}\n            configuration={myConfig}\n        />\n    )\n}\n")),(0,l.kt)("h2",{id:"onsubmit"},"OnSubmit"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Form")," espera una callback que llamar cuando se someta el formulario. Aqui es donde entra ",(0,l.kt)("inlineCode",{parentName:"p"},"onSubmit: (data: JSON) => void"),".\nEsta funcion recibira un JSON con la misma estructura determinada por los ids de los campos.\nSi utilizamos como ejemplo esta estructura."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const config = {\n    layout: ...\n    actions: ...\n    fields: [\n        {\n            id: 'firstName'\n            ...\n        },\n        {\n            id: 'lastName',\n            ...\n        },\n        {\n            id: 'address.city',\n            ...\n        },{\n            id: 'address.state'\n            ...\n        }\n    ]\n}\n")),(0,l.kt)("p",null,"OnSubmit regresaria una estructura asi."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n    firstName: '...',\n    lastName: '...',\n    address: {\n        city: '...',\n        state: '...',\n    }\n}\n\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Es muy comun que en la funcion enviada a ",(0,l.kt)("strong",{parentName:"p"},"onSubmit")," se haga procesamiento adicional,\ncomo agregar el usuario con sesion activa al payload antes de enviarlo al servidor."),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const handleOnSubmit = (data) => {\n    const payload = {\n            ...data,\n            currentUser: session.user.id,\n            currentTime: moment().format('YYYY/MM/DD')\n            firstName: 'Mr.' + data.firstName\n        }\n\n        ServerAPI.createUser(payload);\n    }\n")))),(0,l.kt)("h2",{id:"tipos-de-campos"},"Tipos de campos"),(0,l.kt)("p",null,"Un formulario puede desplegar cualquiera de los siguentes campos."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Text"),(0,l.kt)("li",{parentName:"ul"},"TextArea"),(0,l.kt)("li",{parentName:"ul"},"DatePicker"),(0,l.kt)("li",{parentName:"ul"},"MultiFile Input"),(0,l.kt)("li",{parentName:"ul"},"Select")),(0,l.kt)("h2",{id:"default-values"},"Default Values"),(0,l.kt)("p",null,"Los datos que recibe el formulario es un JSON cuya forma se conforma a los ",(0,l.kt)("strong",{parentName:"p"},"Ids")," de los campos."),(0,l.kt)("p",null,"Tomando por ejemplo la siguiente configuracion."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const myData = {\n    name: 'Hugo',\n    address: {\n        city: 'Monterrey'\n    }\n}\n\nconst myConfig = {\n    layout: ...\n    actions: ...\n    fields: [\n        {\n            id: 'name',\n            type: 'text',\n            label: 'Nombre'\n        },\n        {\n            id: 'address.city'\n            type: 'text',\n            label: 'Ciudad'\n        }\n\n    ]\n\n}\n\nconst MyForm = () => {\n    /* ... */\n\n    return (\n        <FormComponent\n            onSubmit={onSubmit}\n            configuration={config}\n            data={myData}\n        />\n    )\n}\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Los campos saben de donde sacar su valor defecto por el id que tiene asignado.")),(0,l.kt)("p",null,"El campo de nombre 'Hugo' como valor default y ciudad tendra 'Monterrey'.\nCiudad tiene como id ",(0,l.kt)("inlineCode",{parentName:"p"},"address.city")," entonces sabe que su valor por defecto es ",(0,l.kt)("inlineCode",{parentName:"p"},"data.address.city"),"."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"El parametro data es especialmente util para formularios donde tu objetivo es ",(0,l.kt)("strong",{parentName:"p"},"editar"),", en vez de crear.\nYa que simplemente pasas el objeto original como data."))),(0,l.kt)("h2",{id:"onchange"},"OnChange"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Todo")),(0,l.kt)("h2",{id:"custom-layouts"},"Custom Layouts"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Todo")),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"El objeto ",(0,l.kt)("inlineCode",{parentName:"p"},"FormConfiguration")," espera los siguientes parametros."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parametro"),(0,l.kt)("th",{parentName:"tr",align:null},"Tipo"),(0,l.kt)("th",{parentName:"tr",align:null},"Opcional"),(0,l.kt)("th",{parentName:"tr",align:null},"Descripcion"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"layout"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"Form#formlayout"},"FormLayout")),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Describe el tipo de estructura del formulario.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"actions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"Form#formaction"},"FormAction[]")),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Componentes que se desplegaran al pie del formulario, comunmente esta el boton para someter el formulario.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fields"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"Form#fieldobject"},"FieldObject[]")),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Describe los campos del formulario incluyendo el tipo, comportamiento y reglas respectivas.")))),(0,l.kt)("h4",{id:"formlayout"},"FormLayout"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parametro"),(0,l.kt)("th",{parentName:"tr",align:null},"Tipo"),(0,l.kt)("th",{parentName:"tr",align:null},"Opcional"),(0,l.kt)("th",{parentName:"tr",align:null},"Descripcion"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"string = 'grid'"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Describe el tipo de estructura del formulario. (Solo se ha implementado el tipo ",(0,l.kt)("inlineCode",{parentName:"td"},"grid"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cols"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Solo para tipo ",(0,l.kt)("inlineCode",{parentName:"td"},"grid")," Cuantas columnas tendra el grid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fieldLayout"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"Form#fieldlayoutobject"},"FieldLayoutObject"),"[]"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Describe el orden de los campos y cuanto espacio tendra cada uno")))),(0,l.kt)("h4",{id:"fieldlayoutobject"},"FieldLayoutObject"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parametro"),(0,l.kt)("th",{parentName:"tr",align:null},"Tipo"),(0,l.kt)("th",{parentName:"tr",align:null},"Opcional"),(0,l.kt)("th",{parentName:"tr",align:null},"Descripcion"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Identifica el campo que esta configurando, debe ser igual a un campo en ",(0,l.kt)("inlineCode",{parentName:"td"},"Configuration.fields"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cols"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Identifica cuantas columnas tendra de espacio.")))),(0,l.kt)("h4",{id:"formaction"},"FormAction"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parametro"),(0,l.kt)("th",{parentName:"tr",align:null},"Tipo"),(0,l.kt)("th",{parentName:"tr",align:null},"Opcional"),(0,l.kt)("th",{parentName:"tr",align:null},"Descripcion"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"render"),(0,l.kt)("td",{parentName:"tr",align:null},"(void) => React.FunctionalComponent"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Funcion para construir el componente que se desplegara")))),(0,l.kt)("h4",{id:"fieldobject"},"FieldObject"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parametro"),(0,l.kt)("th",{parentName:"tr",align:null},"Tipo"),(0,l.kt)("th",{parentName:"tr",align:null},"Opcional"),(0,l.kt)("th",{parentName:"tr",align:null},"Descripcion"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Id del campo, util para vincularlo con ",(0,l.kt)("a",{parentName:"td",href:"Form#fieldlayoutobject"},"FieldLayoutObject"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"string = 'text' ","|"," 'textarea' ","|"," 'date' ","|"," 'select' ","|"," 'multi-file'"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"Tipo de input que aparecera")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"label"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"El encabezado del campo")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rules"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://react-hook-form.com/api/useform/register"},"RegisterOptions")),(0,l.kt)("td",{parentName:"tr",align:null},"si"),(0,l.kt)("td",{parentName:"tr",align:null},"Reglas adicionales de validacion utilizando ",(0,l.kt)("a",{parentName:"td",href:"https://react-hook-form.com"},"react-hook-forms"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optionsFn"),(0,l.kt)("td",{parentName:"tr",align:null},"SelectOption[]"),(0,l.kt)("td",{parentName:"tr",align:null},"type == 'select' ? si : no"),(0,l.kt)("td",{parentName:"tr",align:null},"Los campos con los que dispondra un select")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"display"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean (default: true)"),(0,l.kt)("td",{parentName:"tr",align:null},"si"),(0,l.kt)("td",{parentName:"tr",align:null},"Determina si se debe de esconder el campo")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"({event: React.SyntheticEvent, data: FormData, formMethods: ",(0,l.kt)("a",{parentName:"td",href:"https://react-hook-form.com/api/useform"},"UseFormOutput"),"} => void)"),(0,l.kt)("td",{parentName:"tr",align:null},"si"),(0,l.kt)("td",{parentName:"tr",align:null},"Para extender funcionalidad, se puede mandar un callback que se ejecuta cada vez que se cambia el campo. El callback tendra acceso al contexto del formulario.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"readOnly"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean (default: false)"),(0,l.kt)("td",{parentName:"tr",align:null},"si"),(0,l.kt)("td",{parentName:"tr",align:null},"Determina si el valor del campo se puede editar.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"disabled"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean (default: false)"),(0,l.kt)("td",{parentName:"tr",align:null},"si"),(0,l.kt)("td",{parentName:"tr",align:null},"Determina si el campo esta habliitado (La diferencia con readOnly es que cuando el campo esta desactivado, el valor no se envia al someter el formulario)")))))}c.isMDXComponent=!0}}]);